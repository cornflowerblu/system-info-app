name: Release Build

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  create-release:
    runs-on: ubuntu-latest
    outputs:
      release_id: ${{ steps.create-release.outputs.id }}
      upload_url: ${{ steps.create-release.outputs.upload_url }}
    steps:
      - name: Create Release
        id: create-release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: 'System Info App ${{ github.ref_name }}'
          body: |
            Cross-platform system information application

            ## Features
            - Computer name
            - Total physical memory
            - Current process ID
            - Factorial calculator

            ## Platform Support
            - Windows (x64)
            - macOS (Apple Silicon)
          draft: true
          prerelease: false

  release:
    needs: create-release
    strategy:
      fail-fast: false
      matrix:
        platform:
          - os: windows-latest
            rust_target: x86_64-pc-windows-msvc
          - os: macos-latest
            rust_target: aarch64-apple-darwin

    runs-on: ${{ matrix.platform.os }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform.rust_target }}

      - name: Install dependencies (Ubuntu)
        if: matrix.platform.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev libayatana-appindicator3-dev librsvg2-dev cmake

      - name: Install dependencies (macOS)
        if: matrix.platform.os == 'macos-latest'
        run: |
          brew install cmake

      - name: Install CMake (Windows)
        if: matrix.platform.os == 'windows-latest'
        uses: lukka/get-cmake@latest

      - name: Build C++ library (Windows)
        if: matrix.platform.os == 'windows-latest'
        shell: bash
        run: |
          set -e
          cd cpp_cross_platform
          mkdir build
          cd build
          cmake ..
          cmake --build . --config Release
          # Verify the DLL was created
          if [ ! -f "bin/Release/systemapi.dll" ]; then
            echo "Error: systemapi.dll not found after build"
            exit 1
          fi
          # Copy the DLL to where Tauri will bundle it
          mkdir -p ../../src-tauri/lib
          cp bin/Release/systemapi.dll ../../src-tauri/lib/
          cd ../../src-tauri/lib && ls
          echo "Successfully built and copied systemapi.dll"

      - name: Build C++ library (macOS)
        if: matrix.platform.os == 'macos-latest'
        run: |
          set -e
          cd cpp_cross_platform
          mkdir build
          cd build
          cmake -DCMAKE_OSX_ARCHITECTURES=${{ matrix.platform.rust_target == 'aarch64-apple-darwin' && 'arm64' || 'x86_64' }} ..
          cmake --build . --config Release
          # Verify the dylib was created
          if [ ! -f "lib/libsystemapi.dylib" ]; then
            echo "Error: libsystemapi.dylib not found after build"
            exit 1
          fi
          # Copy the dylib to where Tauri will bundle it
          mkdir -p ../../src-tauri/lib
          cp lib/libsystemapi.dylib ../../src-tauri/lib/
          cd ../../src-tauri/lib && ls
          echo "Successfully built and copied libsystemapi.dylib"

      - name: Import Apple Code Signing Certificate
        if: matrix.platform.os == 'macos-latest'
        env:
          APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
        run: |
          # Create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
          KEYCHAIN_PASSWORD=$(openssl rand -base64 32)

          # Decode certificate from base64
          echo -n "$APPLE_CERTIFICATE" | base64 --decode -o $CERTIFICATE_PATH

          # Create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # Import certificate to keychain
          security import $CERTIFICATE_PATH -P "$APPLE_CERTIFICATE_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          # Allow codesign to access the keychain
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

      - name: Install frontend dependencies
        run: npm install

      - name: Build Tauri app
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          APPLE_SIGNING_IDENTITY: ${{ matrix.platform.os == 'macos-latest' && '-' || '' }}
        with:
          releaseId: ${{ needs.create-release.outputs.release_id }}
          args: ${{ matrix.platform.rust_target == 'aarch64-apple-darwin' && '--target aarch64-apple-darwin' || '' }}

  publish-release:
    needs: [create-release, release]
    runs-on: ubuntu-latest
    if: success()
    steps:
      - name: Publish Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release edit ${{ github.ref_name }} --draft=false --repo ${{ github.repository }}
