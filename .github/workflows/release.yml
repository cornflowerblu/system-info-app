name: Release Build

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:

permissions:
  contents: write
  issues: write
  pull-requests: write
  packages: write
  actions: write
  id-token: write
  deployments: write

jobs:
  create-release:
    runs-on: ubuntu-latest
    outputs:
      release_id: ${{ steps.create-release.outputs.id }}
      upload_url: ${{ steps.create-release.outputs.upload_url }}
    steps:
      - name: Create Release
        id: create-release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_PAT }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: "System Info App ${{ github.ref_name }}"
          body: |
            Cross-platform system information application

            ## Features
            - Computer name
            - Total physical memory
            - Current process ID
            - Factorial calculator

            ## Platform Support
            - Windows (x64)
            - macOS (Apple Silicon)
          draft: true
          prerelease: false

  release:
    needs: create-release
    strategy:
      fail-fast: false
      matrix:
        platform:
          - os: windows-latest
            rust_target: x86_64-pc-windows-msvc
          - os: macos-latest
            rust_target: aarch64-apple-darwin

    runs-on: ${{ matrix.platform.os }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform.rust_target }}

      - name: Install dependencies (Ubuntu)
        if: matrix.platform.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          # Install required packages, one per line for clarity
          sudo apt-get install -y \
            libgtk-3-dev \
            libwebkit2gtk-4.0-dev \
            libayatana-appindicator3-dev \
            librsvg2-dev \
            cmake

      - name: Install dependencies (macOS)
        if: matrix.platform.os == 'macos-latest'
        run: |
          brew install cmake

      - name: Install CMake (Windows)
        if: matrix.platform.os == 'windows-latest'
        uses: lukka/get-cmake@latest

      - name: Build Windows Release
        if: matrix.platform.os == 'windows-latest'
        shell: pwsh
        run: |
          .\scripts\build-windows.ps1

      - name: Build macOS Release
        if: matrix.platform.os == 'macos-latest'
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          APPLE_APP_CERTIFICATE: ${{ secrets.APPLE_APP_CERTIFICATE }}
          APPLE_APP_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_APP_CERTIFICATE_PASSWORD }}
        run: |
          chmod +x scripts/build-macos.sh
          bash scripts/build-macos.sh --sign

      - name: Upload Release Assets
        if: matrix.platform.os == 'windows-latest'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_PAT }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: src-tauri/target/release/bundle/msi/system-info-app_0.1.0_x64_en-US.msi
          asset_name: system-info-app-windows-x64.msi
          asset_content_type: application/x-msi

      - name: Upload Release Assets
        if: matrix.platform.os == 'macos-latest'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_PAT }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: src-tauri/target/aarch64-apple-darwin/release/bundle/dmg/system-info-app_0.1.0_aarch64.dmg
          asset_name: system-info-app-macos-arm64.dmg
          asset_content_type: application/x-apple-diskimage

  publish-release:
    needs: [create-release, release]
    runs-on: ubuntu-latest
    if: success()
    steps:
      - name: Publish Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release edit ${{ github.ref_name }} --draft=false --repo ${{ github.repository }}
